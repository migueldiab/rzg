<?php

/**
 * Base class that represents a row from the 'corredor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 02/04/09 01:14:04
 *
 * @package    lib.model.om
 */
abstract class BaseCorredor extends BaseObject  implements Persistent {


  const PEER = 'CorredorPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CorredorPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the documento field.
	 * @var        string
	 */
	protected $documento;

	/**
	 * The value for the id_tipo_documento field.
	 * @var        int
	 */
	protected $id_tipo_documento;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellido field.
	 * @var        string
	 */
	protected $apellido;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the movil field.
	 * @var        string
	 */
	protected $movil;

	/**
	 * The value for the telefono_emergencia field.
	 * @var        string
	 */
	protected $telefono_emergencia;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the fecha_nacimiento field.
	 * @var        string
	 */
	protected $fecha_nacimiento;

	/**
	 * The value for the pareja field.
	 * @var        string
	 */
	protected $pareja;

	/**
	 * The value for the hijos field.
	 * @var        string
	 */
	protected $hijos;

	/**
	 * The value for the id_sociedad_medica field.
	 * @var        int
	 */
	protected $id_sociedad_medica;

	/**
	 * The value for the historia_medica field.
	 * @var        string
	 */
	protected $historia_medica;

	/**
	 * The value for the sexo field.
	 * @var        string
	 */
	protected $sexo;

	/**
	 * The value for the id_localidad field.
	 * @var        int
	 */
	protected $id_localidad;

	/**
	 * The value for the id_pais field.
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * The value for the id_chips field.
	 * @var        int
	 */
	protected $id_chips;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the updated_by field.
	 * @var        int
	 */
	protected $updated_by;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the created_by field.
	 * @var        int
	 */
	protected $created_by;

	/**
	 * @var        TipoDocumento
	 */
	protected $aTipoDocumento;

	/**
	 * @var        SociedadMedica
	 */
	protected $aSociedadMedica;

	/**
	 * @var        Localidad
	 */
	protected $aLocalidad;

	/**
	 * @var        Pais
	 */
	protected $aPais;

	/**
	 * @var        Chip
	 */
	protected $aChip;

	/**
	 * @var        array AsociacionCorredor[] Collection to store aggregation of AsociacionCorredor objects.
	 */
	protected $collAsociacionCorredors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAsociacionCorredors.
	 */
	private $lastAsociacionCorredorCriteria = null;

	/**
	 * @var        array CorredorEquipamiento[] Collection to store aggregation of CorredorEquipamiento objects.
	 */
	protected $collCorredorEquipamientos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCorredorEquipamientos.
	 */
	private $lastCorredorEquipamientoCriteria = null;

	/**
	 * @var        array CuentaCorriente[] Collection to store aggregation of CuentaCorriente objects.
	 */
	protected $collCuentaCorrientes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCuentaCorrientes.
	 */
	private $lastCuentaCorrienteCriteria = null;

	/**
	 * @var        array Inscripcion[] Collection to store aggregation of Inscripcion objects.
	 */
	protected $collInscripcions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInscripcions.
	 */
	private $lastInscripcionCriteria = null;

	/**
	 * @var        array Resultado[] Collection to store aggregation of Resultado objects.
	 */
	protected $collResultados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collResultados.
	 */
	private $lastResultadoCriteria = null;

	/**
	 * @var        array Usuario[] Collection to store aggregation of Usuario objects.
	 */
	protected $collUsuarios;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarios.
	 */
	private $lastUsuarioCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCorredor object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [documento] column value.
	 * 
	 * @return     string
	 */
	public function getDocumento()
	{
		return $this->documento;
	}

	/**
	 * Get the [id_tipo_documento] column value.
	 * 
	 * @return     int
	 */
	public function getIdTipoDocumento()
	{
		return $this->id_tipo_documento;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellido] column value.
	 * 
	 * @return     string
	 */
	public function getApellido()
	{
		return $this->apellido;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [movil] column value.
	 * 
	 * @return     string
	 */
	public function getMovil()
	{
		return $this->movil;
	}

	/**
	 * Get the [telefono_emergencia] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonoEmergencia()
	{
		return $this->telefono_emergencia;
	}

	/**
	 * Get the [direccion] column value.
	 * 
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_nacimiento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaNacimiento($format = 'Y-m-d')
	{
		if ($this->fecha_nacimiento === null) {
			return null;
		}


		if ($this->fecha_nacimiento === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_nacimiento);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_nacimiento, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [pareja] column value.
	 * 
	 * @return     string
	 */
	public function getPareja()
	{
		return $this->pareja;
	}

	/**
	 * Get the [hijos] column value.
	 * 
	 * @return     string
	 */
	public function getHijos()
	{
		return $this->hijos;
	}

	/**
	 * Get the [id_sociedad_medica] column value.
	 * 
	 * @return     int
	 */
	public function getIdSociedadMedica()
	{
		return $this->id_sociedad_medica;
	}

	/**
	 * Get the [historia_medica] column value.
	 * 
	 * @return     string
	 */
	public function getHistoriaMedica()
	{
		return $this->historia_medica;
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     string
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Get the [id_localidad] column value.
	 * 
	 * @return     int
	 */
	public function getIdLocalidad()
	{
		return $this->id_localidad;
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Get the [id_chips] column value.
	 * 
	 * @return     int
	 */
	public function getIdChips()
	{
		return $this->id_chips;
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [updated_by] column value.
	 * 
	 * @return     int
	 */
	public function getUpdatedBy()
	{
		return $this->updated_by;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [created_by] column value.
	 * 
	 * @return     int
	 */
	public function getCreatedBy()
	{
		return $this->created_by;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CorredorPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [documento] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setDocumento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->documento !== $v) {
			$this->documento = $v;
			$this->modifiedColumns[] = CorredorPeer::DOCUMENTO;
		}

		return $this;
	} // setDocumento()

	/**
	 * Set the value of [id_tipo_documento] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setIdTipoDocumento($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_tipo_documento !== $v) {
			$this->id_tipo_documento = $v;
			$this->modifiedColumns[] = CorredorPeer::ID_TIPO_DOCUMENTO;
		}

		if ($this->aTipoDocumento !== null && $this->aTipoDocumento->getId() !== $v) {
			$this->aTipoDocumento = null;
		}

		return $this;
	} // setIdTipoDocumento()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = CorredorPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellido] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido !== $v) {
			$this->apellido = $v;
			$this->modifiedColumns[] = CorredorPeer::APELLIDO;
		}

		return $this;
	} // setApellido()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = CorredorPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [movil] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setMovil($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->movil !== $v) {
			$this->movil = $v;
			$this->modifiedColumns[] = CorredorPeer::MOVIL;
		}

		return $this;
	} // setMovil()

	/**
	 * Set the value of [telefono_emergencia] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setTelefonoEmergencia($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_emergencia !== $v) {
			$this->telefono_emergencia = $v;
			$this->modifiedColumns[] = CorredorPeer::TELEFONO_EMERGENCIA;
		}

		return $this;
	} // setTelefonoEmergencia()

	/**
	 * Set the value of [direccion] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = CorredorPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Sets the value of [fecha_nacimiento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setFechaNacimiento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_nacimiento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_nacimiento !== null && $tmpDt = new DateTime($this->fecha_nacimiento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_nacimiento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CorredorPeer::FECHA_NACIMIENTO;
			}
		} // if either are not null

		return $this;
	} // setFechaNacimiento()

	/**
	 * Set the value of [pareja] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setPareja($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pareja !== $v) {
			$this->pareja = $v;
			$this->modifiedColumns[] = CorredorPeer::PAREJA;
		}

		return $this;
	} // setPareja()

	/**
	 * Set the value of [hijos] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setHijos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hijos !== $v) {
			$this->hijos = $v;
			$this->modifiedColumns[] = CorredorPeer::HIJOS;
		}

		return $this;
	} // setHijos()

	/**
	 * Set the value of [id_sociedad_medica] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setIdSociedadMedica($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_sociedad_medica !== $v) {
			$this->id_sociedad_medica = $v;
			$this->modifiedColumns[] = CorredorPeer::ID_SOCIEDAD_MEDICA;
		}

		if ($this->aSociedadMedica !== null && $this->aSociedadMedica->getId() !== $v) {
			$this->aSociedadMedica = null;
		}

		return $this;
	} // setIdSociedadMedica()

	/**
	 * Set the value of [historia_medica] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setHistoriaMedica($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->historia_medica !== $v) {
			$this->historia_medica = $v;
			$this->modifiedColumns[] = CorredorPeer::HISTORIA_MEDICA;
		}

		return $this;
	} // setHistoriaMedica()

	/**
	 * Set the value of [sexo] column.
	 * 
	 * @param      string $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = CorredorPeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Set the value of [id_localidad] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setIdLocalidad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_localidad !== $v) {
			$this->id_localidad = $v;
			$this->modifiedColumns[] = CorredorPeer::ID_LOCALIDAD;
		}

		if ($this->aLocalidad !== null && $this->aLocalidad->getId() !== $v) {
			$this->aLocalidad = null;
		}

		return $this;
	} // setIdLocalidad()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = CorredorPeer::ID_PAIS;
		}

		if ($this->aPais !== null && $this->aPais->getId() !== $v) {
			$this->aPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Set the value of [id_chips] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setIdChips($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_chips !== $v) {
			$this->id_chips = $v;
			$this->modifiedColumns[] = CorredorPeer::ID_CHIPS;
		}

		if ($this->aChip !== null && $this->aChip->getId() !== $v) {
			$this->aChip = null;
		}

		return $this;
	} // setIdChips()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CorredorPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [updated_by] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setUpdatedBy($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->updated_by !== $v) {
			$this->updated_by = $v;
			$this->modifiedColumns[] = CorredorPeer::UPDATED_BY;
		}

		return $this;
	} // setUpdatedBy()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CorredorPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [created_by] column.
	 * 
	 * @param      int $v new value
	 * @return     Corredor The current object (for fluent API support)
	 */
	public function setCreatedBy($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->created_by !== $v) {
			$this->created_by = $v;
			$this->modifiedColumns[] = CorredorPeer::CREATED_BY;
		}

		return $this;
	} // setCreatedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->documento = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->id_tipo_documento = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nombre = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->apellido = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->telefono = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->movil = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->telefono_emergencia = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->direccion = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->fecha_nacimiento = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->pareja = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->hijos = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->id_sociedad_medica = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->historia_medica = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->sexo = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->id_localidad = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->id_pais = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->id_chips = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->updated_at = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->updated_by = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->created_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->created_by = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = CorredorPeer::NUM_COLUMNS - CorredorPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Corredor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aTipoDocumento !== null && $this->id_tipo_documento !== $this->aTipoDocumento->getId()) {
			$this->aTipoDocumento = null;
		}
		if ($this->aSociedadMedica !== null && $this->id_sociedad_medica !== $this->aSociedadMedica->getId()) {
			$this->aSociedadMedica = null;
		}
		if ($this->aLocalidad !== null && $this->id_localidad !== $this->aLocalidad->getId()) {
			$this->aLocalidad = null;
		}
		if ($this->aPais !== null && $this->id_pais !== $this->aPais->getId()) {
			$this->aPais = null;
		}
		if ($this->aChip !== null && $this->id_chips !== $this->aChip->getId()) {
			$this->aChip = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CorredorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CorredorPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aTipoDocumento = null;
			$this->aSociedadMedica = null;
			$this->aLocalidad = null;
			$this->aPais = null;
			$this->aChip = null;
			$this->collAsociacionCorredors = null;
			$this->lastAsociacionCorredorCriteria = null;

			$this->collCorredorEquipamientos = null;
			$this->lastCorredorEquipamientoCriteria = null;

			$this->collCuentaCorrientes = null;
			$this->lastCuentaCorrienteCriteria = null;

			$this->collInscripcions = null;
			$this->lastInscripcionCriteria = null;

			$this->collResultados = null;
			$this->lastResultadoCriteria = null;

			$this->collUsuarios = null;
			$this->lastUsuarioCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCorredor:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CorredorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CorredorPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCorredor:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCorredor:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isModified() && !$this->isColumnModified(CorredorPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

    if ($this->isNew() && !$this->isColumnModified(CorredorPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CorredorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCorredor:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CorredorPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTipoDocumento !== null) {
				if ($this->aTipoDocumento->isModified() || $this->aTipoDocumento->isNew()) {
					$affectedRows += $this->aTipoDocumento->save($con);
				}
				$this->setTipoDocumento($this->aTipoDocumento);
			}

			if ($this->aSociedadMedica !== null) {
				if ($this->aSociedadMedica->isModified() || $this->aSociedadMedica->isNew()) {
					$affectedRows += $this->aSociedadMedica->save($con);
				}
				$this->setSociedadMedica($this->aSociedadMedica);
			}

			if ($this->aLocalidad !== null) {
				if ($this->aLocalidad->isModified() || $this->aLocalidad->isNew()) {
					$affectedRows += $this->aLocalidad->save($con);
				}
				$this->setLocalidad($this->aLocalidad);
			}

			if ($this->aPais !== null) {
				if ($this->aPais->isModified() || $this->aPais->isNew()) {
					$affectedRows += $this->aPais->save($con);
				}
				$this->setPais($this->aPais);
			}

			if ($this->aChip !== null) {
				if ($this->aChip->isModified() || $this->aChip->isNew()) {
					$affectedRows += $this->aChip->save($con);
				}
				$this->setChip($this->aChip);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CorredorPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CorredorPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CorredorPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAsociacionCorredors !== null) {
				foreach ($this->collAsociacionCorredors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCorredorEquipamientos !== null) {
				foreach ($this->collCorredorEquipamientos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCuentaCorrientes !== null) {
				foreach ($this->collCuentaCorrientes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInscripcions !== null) {
				foreach ($this->collInscripcions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collResultados !== null) {
				foreach ($this->collResultados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsuarios !== null) {
				foreach ($this->collUsuarios as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aTipoDocumento !== null) {
				if (!$this->aTipoDocumento->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTipoDocumento->getValidationFailures());
				}
			}

			if ($this->aSociedadMedica !== null) {
				if (!$this->aSociedadMedica->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSociedadMedica->getValidationFailures());
				}
			}

			if ($this->aLocalidad !== null) {
				if (!$this->aLocalidad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLocalidad->getValidationFailures());
				}
			}

			if ($this->aPais !== null) {
				if (!$this->aPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
				}
			}

			if ($this->aChip !== null) {
				if (!$this->aChip->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aChip->getValidationFailures());
				}
			}


			if (($retval = CorredorPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAsociacionCorredors !== null) {
					foreach ($this->collAsociacionCorredors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCorredorEquipamientos !== null) {
					foreach ($this->collCorredorEquipamientos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCuentaCorrientes !== null) {
					foreach ($this->collCuentaCorrientes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInscripcions !== null) {
					foreach ($this->collInscripcions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collResultados !== null) {
					foreach ($this->collResultados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsuarios !== null) {
					foreach ($this->collUsuarios as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CorredorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getDocumento();
				break;
			case 2:
				return $this->getIdTipoDocumento();
				break;
			case 3:
				return $this->getNombre();
				break;
			case 4:
				return $this->getApellido();
				break;
			case 5:
				return $this->getTelefono();
				break;
			case 6:
				return $this->getMovil();
				break;
			case 7:
				return $this->getTelefonoEmergencia();
				break;
			case 8:
				return $this->getDireccion();
				break;
			case 9:
				return $this->getFechaNacimiento();
				break;
			case 10:
				return $this->getPareja();
				break;
			case 11:
				return $this->getHijos();
				break;
			case 12:
				return $this->getIdSociedadMedica();
				break;
			case 13:
				return $this->getHistoriaMedica();
				break;
			case 14:
				return $this->getSexo();
				break;
			case 15:
				return $this->getIdLocalidad();
				break;
			case 16:
				return $this->getIdPais();
				break;
			case 17:
				return $this->getIdChips();
				break;
			case 18:
				return $this->getUpdatedAt();
				break;
			case 19:
				return $this->getUpdatedBy();
				break;
			case 20:
				return $this->getCreatedAt();
				break;
			case 21:
				return $this->getCreatedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CorredorPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getDocumento(),
			$keys[2] => $this->getIdTipoDocumento(),
			$keys[3] => $this->getNombre(),
			$keys[4] => $this->getApellido(),
			$keys[5] => $this->getTelefono(),
			$keys[6] => $this->getMovil(),
			$keys[7] => $this->getTelefonoEmergencia(),
			$keys[8] => $this->getDireccion(),
			$keys[9] => $this->getFechaNacimiento(),
			$keys[10] => $this->getPareja(),
			$keys[11] => $this->getHijos(),
			$keys[12] => $this->getIdSociedadMedica(),
			$keys[13] => $this->getHistoriaMedica(),
			$keys[14] => $this->getSexo(),
			$keys[15] => $this->getIdLocalidad(),
			$keys[16] => $this->getIdPais(),
			$keys[17] => $this->getIdChips(),
			$keys[18] => $this->getUpdatedAt(),
			$keys[19] => $this->getUpdatedBy(),
			$keys[20] => $this->getCreatedAt(),
			$keys[21] => $this->getCreatedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CorredorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setDocumento($value);
				break;
			case 2:
				$this->setIdTipoDocumento($value);
				break;
			case 3:
				$this->setNombre($value);
				break;
			case 4:
				$this->setApellido($value);
				break;
			case 5:
				$this->setTelefono($value);
				break;
			case 6:
				$this->setMovil($value);
				break;
			case 7:
				$this->setTelefonoEmergencia($value);
				break;
			case 8:
				$this->setDireccion($value);
				break;
			case 9:
				$this->setFechaNacimiento($value);
				break;
			case 10:
				$this->setPareja($value);
				break;
			case 11:
				$this->setHijos($value);
				break;
			case 12:
				$this->setIdSociedadMedica($value);
				break;
			case 13:
				$this->setHistoriaMedica($value);
				break;
			case 14:
				$this->setSexo($value);
				break;
			case 15:
				$this->setIdLocalidad($value);
				break;
			case 16:
				$this->setIdPais($value);
				break;
			case 17:
				$this->setIdChips($value);
				break;
			case 18:
				$this->setUpdatedAt($value);
				break;
			case 19:
				$this->setUpdatedBy($value);
				break;
			case 20:
				$this->setCreatedAt($value);
				break;
			case 21:
				$this->setCreatedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CorredorPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setDocumento($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdTipoDocumento($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNombre($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setApellido($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTelefono($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMovil($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setTelefonoEmergencia($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDireccion($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setFechaNacimiento($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPareja($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setHijos($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIdSociedadMedica($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setHistoriaMedica($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setSexo($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIdLocalidad($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setIdPais($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setIdChips($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUpdatedAt($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUpdatedBy($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCreatedAt($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCreatedBy($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CorredorPeer::DATABASE_NAME);

		if ($this->isColumnModified(CorredorPeer::ID)) $criteria->add(CorredorPeer::ID, $this->id);
		if ($this->isColumnModified(CorredorPeer::DOCUMENTO)) $criteria->add(CorredorPeer::DOCUMENTO, $this->documento);
		if ($this->isColumnModified(CorredorPeer::ID_TIPO_DOCUMENTO)) $criteria->add(CorredorPeer::ID_TIPO_DOCUMENTO, $this->id_tipo_documento);
		if ($this->isColumnModified(CorredorPeer::NOMBRE)) $criteria->add(CorredorPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(CorredorPeer::APELLIDO)) $criteria->add(CorredorPeer::APELLIDO, $this->apellido);
		if ($this->isColumnModified(CorredorPeer::TELEFONO)) $criteria->add(CorredorPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(CorredorPeer::MOVIL)) $criteria->add(CorredorPeer::MOVIL, $this->movil);
		if ($this->isColumnModified(CorredorPeer::TELEFONO_EMERGENCIA)) $criteria->add(CorredorPeer::TELEFONO_EMERGENCIA, $this->telefono_emergencia);
		if ($this->isColumnModified(CorredorPeer::DIRECCION)) $criteria->add(CorredorPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(CorredorPeer::FECHA_NACIMIENTO)) $criteria->add(CorredorPeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
		if ($this->isColumnModified(CorredorPeer::PAREJA)) $criteria->add(CorredorPeer::PAREJA, $this->pareja);
		if ($this->isColumnModified(CorredorPeer::HIJOS)) $criteria->add(CorredorPeer::HIJOS, $this->hijos);
		if ($this->isColumnModified(CorredorPeer::ID_SOCIEDAD_MEDICA)) $criteria->add(CorredorPeer::ID_SOCIEDAD_MEDICA, $this->id_sociedad_medica);
		if ($this->isColumnModified(CorredorPeer::HISTORIA_MEDICA)) $criteria->add(CorredorPeer::HISTORIA_MEDICA, $this->historia_medica);
		if ($this->isColumnModified(CorredorPeer::SEXO)) $criteria->add(CorredorPeer::SEXO, $this->sexo);
		if ($this->isColumnModified(CorredorPeer::ID_LOCALIDAD)) $criteria->add(CorredorPeer::ID_LOCALIDAD, $this->id_localidad);
		if ($this->isColumnModified(CorredorPeer::ID_PAIS)) $criteria->add(CorredorPeer::ID_PAIS, $this->id_pais);
		if ($this->isColumnModified(CorredorPeer::ID_CHIPS)) $criteria->add(CorredorPeer::ID_CHIPS, $this->id_chips);
		if ($this->isColumnModified(CorredorPeer::UPDATED_AT)) $criteria->add(CorredorPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(CorredorPeer::UPDATED_BY)) $criteria->add(CorredorPeer::UPDATED_BY, $this->updated_by);
		if ($this->isColumnModified(CorredorPeer::CREATED_AT)) $criteria->add(CorredorPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CorredorPeer::CREATED_BY)) $criteria->add(CorredorPeer::CREATED_BY, $this->created_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CorredorPeer::DATABASE_NAME);

		$criteria->add(CorredorPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Corredor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setDocumento($this->documento);

		$copyObj->setIdTipoDocumento($this->id_tipo_documento);

		$copyObj->setNombre($this->nombre);

		$copyObj->setApellido($this->apellido);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setMovil($this->movil);

		$copyObj->setTelefonoEmergencia($this->telefono_emergencia);

		$copyObj->setDireccion($this->direccion);

		$copyObj->setFechaNacimiento($this->fecha_nacimiento);

		$copyObj->setPareja($this->pareja);

		$copyObj->setHijos($this->hijos);

		$copyObj->setIdSociedadMedica($this->id_sociedad_medica);

		$copyObj->setHistoriaMedica($this->historia_medica);

		$copyObj->setSexo($this->sexo);

		$copyObj->setIdLocalidad($this->id_localidad);

		$copyObj->setIdPais($this->id_pais);

		$copyObj->setIdChips($this->id_chips);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setUpdatedBy($this->updated_by);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setCreatedBy($this->created_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAsociacionCorredors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAsociacionCorredor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCorredorEquipamientos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCorredorEquipamiento($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCuentaCorrientes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCuentaCorriente($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInscripcions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInscripcion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getResultados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addResultado($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsuarios() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuario($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Corredor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CorredorPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CorredorPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a TipoDocumento object.
	 *
	 * @param      TipoDocumento $v
	 * @return     Corredor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTipoDocumento(TipoDocumento $v = null)
	{
		if ($v === null) {
			$this->setIdTipoDocumento(NULL);
		} else {
			$this->setIdTipoDocumento($v->getId());
		}

		$this->aTipoDocumento = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TipoDocumento object, it will not be re-added.
		if ($v !== null) {
			$v->addCorredor($this);
		}

		return $this;
	}


	/**
	 * Get the associated TipoDocumento object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TipoDocumento The associated TipoDocumento object.
	 * @throws     PropelException
	 */
	public function getTipoDocumento(PropelPDO $con = null)
	{
		if ($this->aTipoDocumento === null && ($this->id_tipo_documento !== null)) {
			$c = new Criteria(TipoDocumentoPeer::DATABASE_NAME);
			$c->add(TipoDocumentoPeer::ID, $this->id_tipo_documento);
			$this->aTipoDocumento = TipoDocumentoPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTipoDocumento->addCorredors($this);
			 */
		}
		return $this->aTipoDocumento;
	}

	/**
	 * Declares an association between this object and a SociedadMedica object.
	 *
	 * @param      SociedadMedica $v
	 * @return     Corredor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSociedadMedica(SociedadMedica $v = null)
	{
		if ($v === null) {
			$this->setIdSociedadMedica(NULL);
		} else {
			$this->setIdSociedadMedica($v->getId());
		}

		$this->aSociedadMedica = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SociedadMedica object, it will not be re-added.
		if ($v !== null) {
			$v->addCorredor($this);
		}

		return $this;
	}


	/**
	 * Get the associated SociedadMedica object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SociedadMedica The associated SociedadMedica object.
	 * @throws     PropelException
	 */
	public function getSociedadMedica(PropelPDO $con = null)
	{
		if ($this->aSociedadMedica === null && ($this->id_sociedad_medica !== null)) {
			$c = new Criteria(SociedadMedicaPeer::DATABASE_NAME);
			$c->add(SociedadMedicaPeer::ID, $this->id_sociedad_medica);
			$this->aSociedadMedica = SociedadMedicaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSociedadMedica->addCorredors($this);
			 */
		}
		return $this->aSociedadMedica;
	}

	/**
	 * Declares an association between this object and a Localidad object.
	 *
	 * @param      Localidad $v
	 * @return     Corredor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setLocalidad(Localidad $v = null)
	{
		if ($v === null) {
			$this->setIdLocalidad(NULL);
		} else {
			$this->setIdLocalidad($v->getId());
		}

		$this->aLocalidad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Localidad object, it will not be re-added.
		if ($v !== null) {
			$v->addCorredor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Localidad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Localidad The associated Localidad object.
	 * @throws     PropelException
	 */
	public function getLocalidad(PropelPDO $con = null)
	{
		if ($this->aLocalidad === null && ($this->id_localidad !== null)) {
			$c = new Criteria(LocalidadPeer::DATABASE_NAME);
			$c->add(LocalidadPeer::ID, $this->id_localidad);
			$this->aLocalidad = LocalidadPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aLocalidad->addCorredors($this);
			 */
		}
		return $this->aLocalidad;
	}

	/**
	 * Declares an association between this object and a Pais object.
	 *
	 * @param      Pais $v
	 * @return     Corredor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPais(Pais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(NULL);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pais object, it will not be re-added.
		if ($v !== null) {
			$v->addCorredor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pais The associated Pais object.
	 * @throws     PropelException
	 */
	public function getPais(PropelPDO $con = null)
	{
		if ($this->aPais === null && ($this->id_pais !== null)) {
			$c = new Criteria(PaisPeer::DATABASE_NAME);
			$c->add(PaisPeer::ID, $this->id_pais);
			$this->aPais = PaisPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPais->addCorredors($this);
			 */
		}
		return $this->aPais;
	}

	/**
	 * Declares an association between this object and a Chip object.
	 *
	 * @param      Chip $v
	 * @return     Corredor The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setChip(Chip $v = null)
	{
		if ($v === null) {
			$this->setIdChips(NULL);
		} else {
			$this->setIdChips($v->getId());
		}

		$this->aChip = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Chip object, it will not be re-added.
		if ($v !== null) {
			$v->addCorredor($this);
		}

		return $this;
	}


	/**
	 * Get the associated Chip object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Chip The associated Chip object.
	 * @throws     PropelException
	 */
	public function getChip(PropelPDO $con = null)
	{
		if ($this->aChip === null && ($this->id_chips !== null)) {
			$c = new Criteria(ChipPeer::DATABASE_NAME);
			$c->add(ChipPeer::ID, $this->id_chips);
			$this->aChip = ChipPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aChip->addCorredors($this);
			 */
		}
		return $this->aChip;
	}

	/**
	 * Clears out the collAsociacionCorredors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAsociacionCorredors()
	 */
	public function clearAsociacionCorredors()
	{
		$this->collAsociacionCorredors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAsociacionCorredors collection (array).
	 *
	 * By default this just sets the collAsociacionCorredors collection to an empty array (like clearcollAsociacionCorredors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAsociacionCorredors()
	{
		$this->collAsociacionCorredors = array();
	}

	/**
	 * Gets an array of AsociacionCorredor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related AsociacionCorredors from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AsociacionCorredor[]
	 * @throws     PropelException
	 */
	public function getAsociacionCorredors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsociacionCorredors === null) {
			if ($this->isNew()) {
			   $this->collAsociacionCorredors = array();
			} else {

				$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

				AsociacionCorredorPeer::addSelectColumns($criteria);
				$this->collAsociacionCorredors = AsociacionCorredorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

				AsociacionCorredorPeer::addSelectColumns($criteria);
				if (!isset($this->lastAsociacionCorredorCriteria) || !$this->lastAsociacionCorredorCriteria->equals($criteria)) {
					$this->collAsociacionCorredors = AsociacionCorredorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAsociacionCorredorCriteria = $criteria;
		return $this->collAsociacionCorredors;
	}

	/**
	 * Returns the number of related AsociacionCorredor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AsociacionCorredor objects.
	 * @throws     PropelException
	 */
	public function countAsociacionCorredors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAsociacionCorredors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

				$count = AsociacionCorredorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastAsociacionCorredorCriteria) || !$this->lastAsociacionCorredorCriteria->equals($criteria)) {
					$count = AsociacionCorredorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAsociacionCorredors);
				}
			} else {
				$count = count($this->collAsociacionCorredors);
			}
		}
		$this->lastAsociacionCorredorCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a AsociacionCorredor object to this object
	 * through the AsociacionCorredor foreign key attribute.
	 *
	 * @param      AsociacionCorredor $l AsociacionCorredor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAsociacionCorredor(AsociacionCorredor $l)
	{
		if ($this->collAsociacionCorredors === null) {
			$this->initAsociacionCorredors();
		}
		if (!in_array($l, $this->collAsociacionCorredors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAsociacionCorredors, $l);
			$l->setCorredor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Corredor is new, it will return
	 * an empty collection; or if this Corredor has previously
	 * been saved, it will retrieve related AsociacionCorredors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Corredor.
	 */
	public function getAsociacionCorredorsJoinAsociacion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAsociacionCorredors === null) {
			if ($this->isNew()) {
				$this->collAsociacionCorredors = array();
			} else {

				$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

				$this->collAsociacionCorredors = AsociacionCorredorPeer::doSelectJoinAsociacion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AsociacionCorredorPeer::ID_CORREDOR, $this->id);

			if (!isset($this->lastAsociacionCorredorCriteria) || !$this->lastAsociacionCorredorCriteria->equals($criteria)) {
				$this->collAsociacionCorredors = AsociacionCorredorPeer::doSelectJoinAsociacion($criteria, $con, $join_behavior);
			}
		}
		$this->lastAsociacionCorredorCriteria = $criteria;

		return $this->collAsociacionCorredors;
	}

	/**
	 * Clears out the collCorredorEquipamientos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCorredorEquipamientos()
	 */
	public function clearCorredorEquipamientos()
	{
		$this->collCorredorEquipamientos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCorredorEquipamientos collection (array).
	 *
	 * By default this just sets the collCorredorEquipamientos collection to an empty array (like clearcollCorredorEquipamientos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCorredorEquipamientos()
	{
		$this->collCorredorEquipamientos = array();
	}

	/**
	 * Gets an array of CorredorEquipamiento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related CorredorEquipamientos from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CorredorEquipamiento[]
	 * @throws     PropelException
	 */
	public function getCorredorEquipamientos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCorredorEquipamientos === null) {
			if ($this->isNew()) {
			   $this->collCorredorEquipamientos = array();
			} else {

				$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

				CorredorEquipamientoPeer::addSelectColumns($criteria);
				$this->collCorredorEquipamientos = CorredorEquipamientoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

				CorredorEquipamientoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCorredorEquipamientoCriteria) || !$this->lastCorredorEquipamientoCriteria->equals($criteria)) {
					$this->collCorredorEquipamientos = CorredorEquipamientoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCorredorEquipamientoCriteria = $criteria;
		return $this->collCorredorEquipamientos;
	}

	/**
	 * Returns the number of related CorredorEquipamiento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CorredorEquipamiento objects.
	 * @throws     PropelException
	 */
	public function countCorredorEquipamientos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCorredorEquipamientos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

				$count = CorredorEquipamientoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastCorredorEquipamientoCriteria) || !$this->lastCorredorEquipamientoCriteria->equals($criteria)) {
					$count = CorredorEquipamientoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCorredorEquipamientos);
				}
			} else {
				$count = count($this->collCorredorEquipamientos);
			}
		}
		$this->lastCorredorEquipamientoCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a CorredorEquipamiento object to this object
	 * through the CorredorEquipamiento foreign key attribute.
	 *
	 * @param      CorredorEquipamiento $l CorredorEquipamiento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCorredorEquipamiento(CorredorEquipamiento $l)
	{
		if ($this->collCorredorEquipamientos === null) {
			$this->initCorredorEquipamientos();
		}
		if (!in_array($l, $this->collCorredorEquipamientos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCorredorEquipamientos, $l);
			$l->setCorredor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Corredor is new, it will return
	 * an empty collection; or if this Corredor has previously
	 * been saved, it will retrieve related CorredorEquipamientos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Corredor.
	 */
	public function getCorredorEquipamientosJoinEquipamiento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCorredorEquipamientos === null) {
			if ($this->isNew()) {
				$this->collCorredorEquipamientos = array();
			} else {

				$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

				$this->collCorredorEquipamientos = CorredorEquipamientoPeer::doSelectJoinEquipamiento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CorredorEquipamientoPeer::ID_CORREDOR, $this->id);

			if (!isset($this->lastCorredorEquipamientoCriteria) || !$this->lastCorredorEquipamientoCriteria->equals($criteria)) {
				$this->collCorredorEquipamientos = CorredorEquipamientoPeer::doSelectJoinEquipamiento($criteria, $con, $join_behavior);
			}
		}
		$this->lastCorredorEquipamientoCriteria = $criteria;

		return $this->collCorredorEquipamientos;
	}

	/**
	 * Clears out the collCuentaCorrientes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCuentaCorrientes()
	 */
	public function clearCuentaCorrientes()
	{
		$this->collCuentaCorrientes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCuentaCorrientes collection (array).
	 *
	 * By default this just sets the collCuentaCorrientes collection to an empty array (like clearcollCuentaCorrientes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCuentaCorrientes()
	{
		$this->collCuentaCorrientes = array();
	}

	/**
	 * Gets an array of CuentaCorriente objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related CuentaCorrientes from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CuentaCorriente[]
	 * @throws     PropelException
	 */
	public function getCuentaCorrientes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCuentaCorrientes === null) {
			if ($this->isNew()) {
			   $this->collCuentaCorrientes = array();
			} else {

				$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

				CuentaCorrientePeer::addSelectColumns($criteria);
				$this->collCuentaCorrientes = CuentaCorrientePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

				CuentaCorrientePeer::addSelectColumns($criteria);
				if (!isset($this->lastCuentaCorrienteCriteria) || !$this->lastCuentaCorrienteCriteria->equals($criteria)) {
					$this->collCuentaCorrientes = CuentaCorrientePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCuentaCorrienteCriteria = $criteria;
		return $this->collCuentaCorrientes;
	}

	/**
	 * Returns the number of related CuentaCorriente objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CuentaCorriente objects.
	 * @throws     PropelException
	 */
	public function countCuentaCorrientes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCuentaCorrientes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

				$count = CuentaCorrientePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastCuentaCorrienteCriteria) || !$this->lastCuentaCorrienteCriteria->equals($criteria)) {
					$count = CuentaCorrientePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCuentaCorrientes);
				}
			} else {
				$count = count($this->collCuentaCorrientes);
			}
		}
		$this->lastCuentaCorrienteCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a CuentaCorriente object to this object
	 * through the CuentaCorriente foreign key attribute.
	 *
	 * @param      CuentaCorriente $l CuentaCorriente
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCuentaCorriente(CuentaCorriente $l)
	{
		if ($this->collCuentaCorrientes === null) {
			$this->initCuentaCorrientes();
		}
		if (!in_array($l, $this->collCuentaCorrientes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCuentaCorrientes, $l);
			$l->setCorredor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Corredor is new, it will return
	 * an empty collection; or if this Corredor has previously
	 * been saved, it will retrieve related CuentaCorrientes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Corredor.
	 */
	public function getCuentaCorrientesJoinFormaPago($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCuentaCorrientes === null) {
			if ($this->isNew()) {
				$this->collCuentaCorrientes = array();
			} else {

				$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

				$this->collCuentaCorrientes = CuentaCorrientePeer::doSelectJoinFormaPago($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CuentaCorrientePeer::ID_CORREDOR, $this->id);

			if (!isset($this->lastCuentaCorrienteCriteria) || !$this->lastCuentaCorrienteCriteria->equals($criteria)) {
				$this->collCuentaCorrientes = CuentaCorrientePeer::doSelectJoinFormaPago($criteria, $con, $join_behavior);
			}
		}
		$this->lastCuentaCorrienteCriteria = $criteria;

		return $this->collCuentaCorrientes;
	}

	/**
	 * Clears out the collInscripcions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInscripcions()
	 */
	public function clearInscripcions()
	{
		$this->collInscripcions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInscripcions collection (array).
	 *
	 * By default this just sets the collInscripcions collection to an empty array (like clearcollInscripcions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInscripcions()
	{
		$this->collInscripcions = array();
	}

	/**
	 * Gets an array of Inscripcion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related Inscripcions from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Inscripcion[]
	 * @throws     PropelException
	 */
	public function getInscripcions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInscripcions === null) {
			if ($this->isNew()) {
			   $this->collInscripcions = array();
			} else {

				$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

				InscripcionPeer::addSelectColumns($criteria);
				$this->collInscripcions = InscripcionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

				InscripcionPeer::addSelectColumns($criteria);
				if (!isset($this->lastInscripcionCriteria) || !$this->lastInscripcionCriteria->equals($criteria)) {
					$this->collInscripcions = InscripcionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInscripcionCriteria = $criteria;
		return $this->collInscripcions;
	}

	/**
	 * Returns the number of related Inscripcion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Inscripcion objects.
	 * @throws     PropelException
	 */
	public function countInscripcions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInscripcions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

				$count = InscripcionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastInscripcionCriteria) || !$this->lastInscripcionCriteria->equals($criteria)) {
					$count = InscripcionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collInscripcions);
				}
			} else {
				$count = count($this->collInscripcions);
			}
		}
		$this->lastInscripcionCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a Inscripcion object to this object
	 * through the Inscripcion foreign key attribute.
	 *
	 * @param      Inscripcion $l Inscripcion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInscripcion(Inscripcion $l)
	{
		if ($this->collInscripcions === null) {
			$this->initInscripcions();
		}
		if (!in_array($l, $this->collInscripcions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInscripcions, $l);
			$l->setCorredor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Corredor is new, it will return
	 * an empty collection; or if this Corredor has previously
	 * been saved, it will retrieve related Inscripcions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Corredor.
	 */
	public function getInscripcionsJoinCategoria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInscripcions === null) {
			if ($this->isNew()) {
				$this->collInscripcions = array();
			} else {

				$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

				$this->collInscripcions = InscripcionPeer::doSelectJoinCategoria($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InscripcionPeer::ID_CORREDOR, $this->id);

			if (!isset($this->lastInscripcionCriteria) || !$this->lastInscripcionCriteria->equals($criteria)) {
				$this->collInscripcions = InscripcionPeer::doSelectJoinCategoria($criteria, $con, $join_behavior);
			}
		}
		$this->lastInscripcionCriteria = $criteria;

		return $this->collInscripcions;
	}

	/**
	 * Clears out the collResultados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addResultados()
	 */
	public function clearResultados()
	{
		$this->collResultados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collResultados collection (array).
	 *
	 * By default this just sets the collResultados collection to an empty array (like clearcollResultados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initResultados()
	{
		$this->collResultados = array();
	}

	/**
	 * Gets an array of Resultado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related Resultados from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Resultado[]
	 * @throws     PropelException
	 */
	public function getResultados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collResultados === null) {
			if ($this->isNew()) {
			   $this->collResultados = array();
			} else {

				$criteria->add(ResultadoPeer::ID_CORREDOR, $this->id);

				ResultadoPeer::addSelectColumns($criteria);
				$this->collResultados = ResultadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ResultadoPeer::ID_CORREDOR, $this->id);

				ResultadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastResultadoCriteria) || !$this->lastResultadoCriteria->equals($criteria)) {
					$this->collResultados = ResultadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastResultadoCriteria = $criteria;
		return $this->collResultados;
	}

	/**
	 * Returns the number of related Resultado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Resultado objects.
	 * @throws     PropelException
	 */
	public function countResultados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collResultados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ResultadoPeer::ID_CORREDOR, $this->id);

				$count = ResultadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ResultadoPeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastResultadoCriteria) || !$this->lastResultadoCriteria->equals($criteria)) {
					$count = ResultadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collResultados);
				}
			} else {
				$count = count($this->collResultados);
			}
		}
		$this->lastResultadoCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a Resultado object to this object
	 * through the Resultado foreign key attribute.
	 *
	 * @param      Resultado $l Resultado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addResultado(Resultado $l)
	{
		if ($this->collResultados === null) {
			$this->initResultados();
		}
		if (!in_array($l, $this->collResultados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collResultados, $l);
			$l->setCorredor($this);
		}
	}

	/**
	 * Clears out the collUsuarios collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarios()
	 */
	public function clearUsuarios()
	{
		$this->collUsuarios = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarios collection (array).
	 *
	 * By default this just sets the collUsuarios collection to an empty array (like clearcollUsuarios());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarios()
	{
		$this->collUsuarios = array();
	}

	/**
	 * Gets an array of Usuario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Corredor has previously been saved, it will retrieve
	 * related Usuarios from storage. If this Corredor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Usuario[]
	 * @throws     PropelException
	 */
	public function getUsuarios($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarios === null) {
			if ($this->isNew()) {
			   $this->collUsuarios = array();
			} else {

				$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

				UsuarioPeer::addSelectColumns($criteria);
				$this->collUsuarios = UsuarioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

				UsuarioPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarioCriteria) || !$this->lastUsuarioCriteria->equals($criteria)) {
					$this->collUsuarios = UsuarioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarioCriteria = $criteria;
		return $this->collUsuarios;
	}

	/**
	 * Returns the number of related Usuario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Usuario objects.
	 * @throws     PropelException
	 */
	public function countUsuarios(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarios === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

				$count = UsuarioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

				if (!isset($this->lastUsuarioCriteria) || !$this->lastUsuarioCriteria->equals($criteria)) {
					$count = UsuarioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsuarios);
				}
			} else {
				$count = count($this->collUsuarios);
			}
		}
		$this->lastUsuarioCriteria = $criteria;
		return $count;
	}

	/**
	 * Method called to associate a Usuario object to this object
	 * through the Usuario foreign key attribute.
	 *
	 * @param      Usuario $l Usuario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuario(Usuario $l)
	{
		if ($this->collUsuarios === null) {
			$this->initUsuarios();
		}
		if (!in_array($l, $this->collUsuarios, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarios, $l);
			$l->setCorredor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Corredor is new, it will return
	 * an empty collection; or if this Corredor has previously
	 * been saved, it will retrieve related Usuarios from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Corredor.
	 */
	public function getUsuariosJoinGrupo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CorredorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarios === null) {
			if ($this->isNew()) {
				$this->collUsuarios = array();
			} else {

				$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

				$this->collUsuarios = UsuarioPeer::doSelectJoinGrupo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarioPeer::ID_CORREDOR, $this->id);

			if (!isset($this->lastUsuarioCriteria) || !$this->lastUsuarioCriteria->equals($criteria)) {
				$this->collUsuarios = UsuarioPeer::doSelectJoinGrupo($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarioCriteria = $criteria;

		return $this->collUsuarios;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAsociacionCorredors) {
				foreach ((array) $this->collAsociacionCorredors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCorredorEquipamientos) {
				foreach ((array) $this->collCorredorEquipamientos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCuentaCorrientes) {
				foreach ((array) $this->collCuentaCorrientes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInscripcions) {
				foreach ((array) $this->collInscripcions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collResultados) {
				foreach ((array) $this->collResultados as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsuarios) {
				foreach ((array) $this->collUsuarios as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAsociacionCorredors = null;
		$this->collCorredorEquipamientos = null;
		$this->collCuentaCorrientes = null;
		$this->collInscripcions = null;
		$this->collResultados = null;
		$this->collUsuarios = null;
			$this->aTipoDocumento = null;
			$this->aSociedadMedica = null;
			$this->aLocalidad = null;
			$this->aPais = null;
			$this->aChip = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCorredor:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCorredor::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCorredor
